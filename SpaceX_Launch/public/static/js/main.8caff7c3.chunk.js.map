{"version":3,"sources":["space-x.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_success","launch_date_local","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","launchitem","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8caff7c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space-x.7dab9996.jpg\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function LaunchItem({launch: {flight_number,\r\n    mission_name,\r\n    launch_success,\r\n    launch_date_local } }) {\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission : <span className={classNames({\r\n                        'text-success': launch_success,\r\n                        'text-danger': !launch_success\r\n                    })} >{mission_name}</span></h4>\r\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:MM\">{launch_date_local}</Moment></p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <span className=\"px-2 mr-2 bg-success\"/>= Success  \r\n            <span className=\"px-2 mr-2 bg-danger\"/>= Failed\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_success\r\n            launch_date_local\r\n            launch_year\r\n        }\r\n    }`\r\n\r\nexport class Launches extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n            <div>\r\n                <h1 className=\"display-4 my-3\">Launches</h1>\r\n                <MissionKey/>\r\n                <Query query={LAUNCHES_QUERY}>\r\n                {\r\n                    ({loading, error, data}) => {\r\n                        if(loading) return <h4>Loading...</h4>\r\n                        if(error) return console.log(\"Error while fetching data : \"+error);\r\n                        //console.log(data);\r\n                        return <Fragment>\r\n                           {\r\n                               data.launches.map( (launchitem) => (\r\n                                <LaunchItem key={launchitem.flight_number} launch={launchitem} />\r\n                               ))\r\n                           }\r\n                        </Fragment>;\r\n                    }\r\n                }\r\n                </Query>\r\n            </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launches\r\n","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport {Link} from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_success\r\n            launch_date_local\r\n            launch_year\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }`\r\n\r\nexport class Launch extends Component {\r\n\r\n    render() {\r\n        console.log(this.props.match.params.flight_number);\r\n        let {flight_number} = this.props.match.params;\r\n        flight_number = parseInt(flight_number);\r\n\r\n        return (\r\n            <Fragment>\r\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\r\n                    {\r\n                         ({loading, error, data}) => {\r\n\r\n                                if(loading) return <h4>Loading...</h4>\r\n                                if(error) return console.log(\"Error while fetching data : \"+error);\r\n                                //console.log(data);\r\n                                const {mission_name, flight_number, launch_success, launch_year, rocket:{\r\n                                    rocket_id,\r\n                                    rocket_name,\r\n                                    rocket_type\r\n                                }} = data.launch;\r\n                                return <div>\r\n                                    <h1 className=\"diplay-4 my-3\" >\r\n                                        <span className=\"text-dark\">Mission:</span>{mission_name}\r\n                                    </h1>\r\n                                    <h4 className=\"mb-3\" >Launch Details</h4>\r\n                                    <ul className=\"list-group\">\r\n                                        <li className=\"list-group-item\">\r\n                                            Flight Number: {flight_number}\r\n                                        </li>\r\n                                        <li className=\"list-group-item\">\r\n                                            Launch Year: {launch_year}\r\n                                        </li>\r\n                                        <li className=\"list-group-item\">\r\n                                            Launch Successful: <span className={classNames({\r\n                                                'text-success': launch_success,\r\n                                                'text-danger' : !launch_success\r\n                                            })} >{launch_success ? 'Yes' : 'No'}</span>\r\n                                        </li>\r\n\r\n                                    </ul>\r\n                                    <h4 className=\"my-3\" >Rocket Details</h4>\r\n                                    <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">\r\n                                            Rocket ID: {rocket_id}\r\n                                        </li>\r\n                                        <li className=\"list-group-item\">\r\n                                        Rocket Name: {rocket_name}\r\n                                        </li>\r\n                                    </ul>\r\n                                    <hr/>\r\n                                    <Link to=\"/\" className=\"btn  btn-secondary\">Back</Link>\r\n                                </div>\r\n                                \r\n                        }\r\n                    }\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launch\r\n","import React from 'react';\nimport './App.css';\nimport logo from './space-x.jpg';\nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  //uri: 'http://localhost:5000/graphql'\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"Space-1X\" style={{width:300, display:'block', margin: 'auto'}}></img>\n          <Route exact path=\"/\" component={Launches}/>\n          <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n        </div>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}